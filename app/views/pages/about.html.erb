<h2>About taskfor.cc</h2>

<p>
  If you work on projects, or in production teams, some of this may sound familiar to you.
</p>

<p>
  My last job was as a Senior Project Manager at a multinational 
telecommunications company. I was responsible for delivering large,
complex projects involving multiple suppliers from around the world.
  In previous roles I've worked as a Business Analyst, Quality Manager,
and Systems Integration engineer in a variety of industries.
</p>

<p>
  Through all these companies, countries, and roles I've been exposed 
  to different systems and tools for managing test cases, 
  managing requirements, managing projects. 
  And in each of these roles I've faced many of the same challenges.
</p>

<h3>Project plans</h3>
<p>
It is vital to plan for projects and to have some way of communicating the plan, but when
it comes to execution, project plans aren't actually very useful.
</p>
<p>
Even if your team manage to open and read the plans, they either don't understand them or
consider them irrelevant to their own work. 
</p>
<p>
Even worse, the tasks to be performed may not exist in the project plan either because:
they're too small to be considered; <i>don't quite fit</i> into your perfect WBS; or simply because
they <i>weren't planned</i>.
</p>

<h3>Software Systems</h3>
<p>
Those fantastic systems you run internally for managing projects, managing defects, or managing
documents, often can't be accessed by everyone on your project. This can be because: 
they're safely locked away behind a firewall; 
the relevant department doesn't have licenses or training;
IT security won't allow installation;
etc...
</p>
<p>
Even if they are accessible, the systems you're using weren't actually designed for task tracking 
and so you have the common problem of <i>if all you have is a hammer, everything looks like a nail</i>.
Except in this case it's your head banging against the keyboard.
</p>

<h3>Action lists</h3>
<p>
Once the lists are sent out, people have a tendancy not to communicate on them until the next review.
</p>
<p>
So what's the status? 
Well either the task hasn't been done because your team weren't aware, 
didn't have time, 
were blocked, 
had some questions...
</p>
<p>
Or, the status has become so confused by a train of emails that it's no longer clear what's
been done, who's currently responsible, and what needs to be done next!
</p>

<h3>Documents</h3>
<p>
You can spend all the time you like putting together formal meeting minutes and status reports,
but the fact is that most people don't take the time to open and interpret these documents let alone 
update you on the status outside of your weekly meetings.
</p>
<p>
Even if they do manage to open, read, and act on them, the status becomes fragmented after you get
multiple versions of documents or emails sent back and forth by your team.
</p>

<h3>Social Work</h3>
<p>
The world has moved on a bit from the times of boring old forms and lists and tight controls.
People have become more familiar with accessing systems that are more freestyle, interactive, and 'social' 
through their experiences with Google, Facebook, Twitter, LinkedIn, etc. 
</p>
<p>
There's a definite utility associated with the Web 2.0 experience that many business-oriented 
platforms fail to take advantage of, and removing controls and rigid processes doesn't have
to equate to a drop in quality or responsibility.
</p>

<h2>The solution</h2>
<p>
So I did what any "lazy" project manager would do and tried to find a way to make my work life 
a little simpler by developing a platform to address these issues.
</p>
<p>
<h3>Guiding principles</h3>
<ul>
  <li>Accessible, simple, and fit for purpose</li>
  <li>Frictionless team and task creation</li>
  <li>Clear responsibility and status</li>
  <li>Straightforward privacy and security</li>
</ul>
</p>
